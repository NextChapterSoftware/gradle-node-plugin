import org.gradle.util.GradleVersion

plugins {
    id "com.github.node-gradle.node"
}

node {
    download = true
    workDir = file("build/node")
}

def changeOptions = isPropertyEnabled("changeOptions")

def changeEnv = isPropertyEnabled("changeEnv")
def changeWorkingDir = isPropertyEnabled("changeWorkingDir")
def fail = isPropertyEnabled("fail")
def ignoreExitValue = isPropertyEnabled("ignoreExitValue")
def outputFile = isPropertyEnabled("outputFile")

task env(type: NodeTask) {
    script = file("env.js")
    outputs.upToDateWhen {
        true
    }
}

if (changeOptions) {
    env.options = ["--print", "1000 * 1000"]
}

if (changeEnv) {
    def qualifier = "custom"
    env.environment = [CUSTOM: "${qualifier} value"]
}

if (changeWorkingDir) {
    env.workingDir = file("${project.buildDir}/notExisting")
}

if (fail) {
    env.args = ['fail']
}

if (ignoreExitValue) {
    env.ignoreExitValue = true
}

if (isPropertyEnabled("outputFile")) {
    def out = project.objects.fileProperty()
    out.set(project.file("${buildDir}/standard-output.txt"))
    env.execOverrides {
        standardOutput = new FileOutputStream(out.get().asFile)
    }
}

task version(type: NodeTask) {
    script = file("version.js")
}

def isPropertyEnabled(String name) {
    def provider = providers.systemProperty(name)
    if (org.gradle.util.GradleVersion.current() >= org.gradle.util.GradleVersion.version("7.4")) {
        return provider.isPresent()
    } else {
        return provider.forUseAtConfigurationTime().isPresent()
    }
}
